import re

text = "Дорогие друзья, социально-экономическое развитие позволяет выполнить важнейшие задания по разработке форм воздействия? " \
       "Не следует, однако, забывать о том, что новая модель организационной деятельности в значительной степени обуславливает создание " \
       "дальнейших направлений развитая системы массового участия. Соображения высшего порядка, а также начало повседневной работы по формированию " \
       "позиции в значительной степени обуславливает создание новых предложений. Значимость этих проблем настолько очевидна, что консультация " \
       "с профессионалами из IT способствует повышению актуальности ключевых компонентов планируемого обновления. Задача организации, " \
       "в особенности же рамки и место обучения кадров позволяет выполнить важнейшие задания по разработке существующих финансовых и " \
       "административных условий! Дорогие друзья, выбранный нами инновационный путь играет важную роль..."

# первым параметром передаём регулярку, а вторым уже наш текст где будем искать
words_list = re.findall("\w+", text)
print(words_list, len(words_list))

# чтоб найти список предложений и количество предложений - воспользуемся следующим кодом и методом split
sent_list = re.split("[?.!]\s", text)
print(sent_list, len(sent_list))

# чтоб найти предложения с интонацией(оставить знаки препинания в конце) - используем следующую конструкцию
# вообще есть три конструкции match, search, findall
# findall - позволяет найти все вхождения, которые мы указываем
# match - ищет строго с начала текста
# search -  находит первое вхождение фрагмента в любом месте и возвращает объект match.

print('-' * 20)

# как работает match
pattern = "развит\w+"
result = re.match(pattern, text)
print(result)  # None - так как предложение у нас начинается с Дорогие, это можно проверить следующим образом

pattern = "\w+"
result = re.match(pattern, text)
print(result)  # нашло слово Дорогие

# search
pattern = "\w+"
result = re.search(pattern, text)
print(result)  # нашло слово Дорогие

# чтоб вывести слово в отдельности используем метод group()
print(result.group())  # Дорогие

# чтоб понять начало и конец нашего результата используем методы .start() и .end()
print(result.start(), result.end())

# вновь попробуем поискать наши предложения
pattern = "[?!.]"
sent_list = []
while len(text) > 0:
    pos = re.search(pattern, text)
    # print(pos)
    sent_list.append(text[:pos.end()])
    text = text[pos.end():]
print(sent_list)

# можно ещё почистить от лишних пробелов
for idx, _ in enumerate(sent_list):
    sent_list[idx] = sent_list[idx].strip()
print(sent_list)
