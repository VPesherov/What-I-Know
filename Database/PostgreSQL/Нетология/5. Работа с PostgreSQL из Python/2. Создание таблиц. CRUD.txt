Тут мы рассмотрим:
1) Как создаются таблицы
2) Как вставлять/удалять/обновлять/извлекать данные из таблицы

Создание таблицы

# подключаться к бд также можно через контекстный менеджер
with psycopg2.connect(database="netology_db", user="postgres", password="123") as conn:
    with conn.cursor() as cur:
        # удаление таблиц
        # cur.execute("""
        # DROP TABLE homework;
        # DROP TABLE course;
        # """)

        # создание таблиц
        cur.execute("""
        CREATE TABLE IF NOT EXISTS course(
            id SERIAL PRIMARY KEY,
            name VARCHAR(40) UNIQUE
        );
        """)

На самом деле мы просто пишем код, который бы мы бы писали в обычном DBeaver'е.
Создадим ещё одну таблицу и зафиксируем измнения

cur.execute("""
                CREATE TABLE IF NOT EXISTS homework(
                    id SERIAL PRIMARY KEY,
                    number INTEGER NOT NULL,
                    description TEXT NOT NULL,
                    course_id INTEGER NOT NULL REFERENCES course(id)
                );
                """)
        conn.commit()

Есть распространённая практика при писании кода, когда проще не обновлять таблицу
(условно добавлять столбцы или менять типы столбцов) иногда проще в таких случаях
просто удалять данные, поэтому обычно всегда на коротком проводе люди держат код
который легко удаляет данные
например:
	# удаление таблиц
        # cur.execute("""
        # DROP TABLE homework;
        # DROP TABLE course;
        # """)

Для добавление данных в таблицу - мы используем INSERT, но в отличии от DBeaver,
python нам не показывает, что он добавил, хотя порой это было бы очень удобно.

# наполнение таблиц (C из CRUD)
        cur.execute("""
        INSERT INTO course(name) VALUES('Python');
        """)
        conn.commit()  # фиксируем в БД

Для этого можно использовать один полезный метод под названием fetchone()
Также у этого метода есть интересная особенность - он сразу делает commit()
и прописывать его лишний раз не надо

        cur.execute("""
                INSERT INTO course(name) VALUES('Java') RETURNING id;
                """)
        print(cur.fetchone())  # запрос данных автоматически зафиксирует изменения

Можно возвращать не только один столбец, а можно через запятую указать нужные

cur.execute("""
                INSERT INTO course(name) VALUES('Java1') RETURNING id, name;
                """)
        print(cur.fetchone())  # запрос данных автоматически зафиксирует изменения

Давайте же попробуем посмотреть все данные которые мы внесли в таблицу

# извлечение данных (R из CRUD)
        cur.execute("""
                SELECT * FROM course;
                """)
        print('fetchall', cur.fetchall())  # извлечь все строки

Можно извлечь только одну строку

cur.execute("""
        SELECT * FROM course;
        """)
        print(cur.fetchone())  # извлечь первую строку (аналог LIMIT 1)

Можно извель определённое количество строк

cur.execute("""
        SELECT * FROM course;
        """)
        print(cur.fetchmany(3))  # извлечь первые N строк (аналог LIMIT N)

Можно извлечь нужное поле

cur.execute("""
        SELECT name FROM course;
        """)
        print(cur.fetchall())

Теперь попробуем извлечь данные по определённому условию
Таким образом можно извлечь поле с названием Python

  cur.execute("""
        SELECT id FROM course WHERE name='Python';
        """)
        print(cur.fetchone())

Но в реальном программировании чаще всего будет так, что нам будут поступать
какие-то аргументы и нам их надо подставлять в запрос
Можно использовать для это f-строки

        cur.execute("""
        SELECT id FROM course WHERE name='{}';
        """.format("Python"))  # плохо - возможна SQL инъекция
        print(cur.fetchone())

Но тогда мы столкнёмся со следующей проблемой, злоумышленникам будет легко
подставить что-то своё
Поэтому лучше всего использовать второй вариант

        cur.execute("""
        SELECT id FROM course WHERE name=%s;
        """, ("Python",))  # хорошо, обратите внимание на кортеж
        print(cur.fetchone())

Попробуем создать функцию, которая ищет по имени наш курс

def get_course_id(cursor, name: str) -> int:
            cursor.execute("""
            SELECT id FROM course WHERE name=%s;
            """, (name,))
            return cur.fetchone()[0]
python_id = get_course_id(cur, 'Python')
print('python_id', python_id)

Обновлять данные мы можем также как и в обычно DBeaver

cur.execute("""
        UPDATE course SET name=%s WHERE id=%s;
        """, ('Python Advanced', python_id))
        cur.execute("""
        SELECT * FROM course;
        """)
        print(cur.fetchall())  # запрос данных автоматически зафиксирует изменения

Удаление данных происходит с помощью delete

# удаление данных (D из CRUD)
        cur.execute("""
        DELETE FROM homework WHERE id=%s;
        """, (1,))
        cur.execute("""
        SELECT * FROM homework;
        """)
        print(cur.fetchall())  # запрос данных автоматически зафиксирует изменения

