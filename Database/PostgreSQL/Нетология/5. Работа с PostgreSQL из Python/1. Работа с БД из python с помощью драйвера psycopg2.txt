Сегодня мы узнаем
1) Как устанавливать драйвер
2) Как подключаться к БД из Python
3) Выполнение SQL-запросов
4) Тразнакции

Для подключение к БД из Python нужен драйвер - это специальная библиотека, которая
может взаимодействовать с БД.
Таким драйвером для PostgreSQL в Python является psycopg2.

Для установки в терминале пишем
pip install psycopg2-binary

После установки в терминале создадим базу данных
createdb -U postgres netology_db

Если не было никаких предупреждений значит БД успешно создана.

Теперь перейдём в сам python

# импортируем саму библиотеку
import psycopg2

# создаём соединение, указываем к какой бд подключаемся, от имени какого пользователя
# подключаемся и пароль
conn = psycopg2.connect(database="netology_db", user="postgres", password="123")

# и также как и с файлами, подключение нужно не забывать закрывать
conn.close()

Выполнение данной строки вернёт нам объект подключения в нашем случае он будет
в переменной conn(принято такой переменной обозначать объект подключения)

conn = psycopg2.connect(database="netology_db", user="postgres", password="123")

Теперь разберёмся как нам отправлять запросы в postgres
Чтоб это сделать - нам понадобится специальный объект который называется курсор

Курсор позволяет нам выполнять запросы и получать ответы от базы

cur = conn.cursor()
cur.execute("")

cur.close()

Его также необходимо закрывать, но у курсора есть контекстный менеджер, который 
мы можем использовать
Поэтому код можно адаптировать вот так

with conn.cursor() as cur:
    cur.execute("") # сюда пишем текст запроса

Давайте попробуем выполнить запрос, создадим бд с одним столбиком

with conn.cursor() as cur:
    cur.execute("CREATE TABLE test(id SERIAL PRIMARY KEY);")

Мы не применяем никакой проверки, что создана таблица в этой бд или нет.
Но если мы будем выполнять этот код несколько раз, то ошибка к нам не вернётся
Как же так?
Дело в том что курсор не выполняет автоматически все запросы который мы ему пошлём.
Курсор просто сохраняет все операции у себя в памяти.
И только тогда когда выполнена операция commit - тогда и отправятся все изменения
в бд.
Тут мы и подошли к идеи Транзакций.
Транзакции - это механизм, который позвоялет нам выполнить либо всё либо ничего.
Если вдруг где-то по середине произошла ошибка.

Чтобы отправить все изменения в БД необходимо на объекте соединения - выполнить функцию
commit().
И только в этот момент - все курсоры которые были созданы отправят свои изменения в БД.

Теперь если мы выполнем данный код один раз

import psycopg2

conn = psycopg2.connect(database="netology_db", user="postgres", password="123")

with conn.cursor() as cur:
    cur.execute("CREATE TABLE test(id SERIAL PRIMARY KEY);")
    conn.commit()
conn.close()

Всё будет отлично и таблица test создастся, но если второй будет ошибка:

# psycopg2.errors.DuplicateTable: ОШИБКА:  отношение "test" уже существует

Изменения же в бд - отправлять необязательно. Как мы уже выяснили транзакции можно
попросить не выполнять какие-то действия.Для этого есть функция rollback() у объекта
conn.
Это значит что все изменения будут проигнорированы и не отправлены в бд.

