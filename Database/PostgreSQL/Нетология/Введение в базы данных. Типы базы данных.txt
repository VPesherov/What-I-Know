Начнём с понятия.
Что же такое база данных(БД)?

База данных - набор взаимосвязанных данных и правила хранения этих данных.

Что бы с ней взаимодействовать нам тоже что-то такое нужно и это СУБД.
СУБД - Система Управления Базами Данных - комплекс программных средств для управления данными.

Аналогия, как можно представить БД и СУБД на Рисунок 1.

Разберём Типы СУБД.
Но прежде чем окунаться в типы - нам нужно разобраться, что такое понятие клиент и сервер(Рисунок 2).
Клиент:
-программа, которая хочет получить информацию
-физическое устройство, на котором работает программа-клиент
Сервер:
-специальная программа, которая даёт информацию
-физическое устройство, на котором запущена программа-сервер

Типы СУБД:
1. Файл-серверные СУБД - здесь файлы с информацией хранятся на сервере, а СУБД на клиенте. (Рисунок 3)
2. Клиент-серверные СУБД - здесь файлы с информацией и СУБД находятся на сервере, а клиент обращается за
информацией через легковесную вспомогательную программу(Рисунок 4).
3. Встраиваемые СУБД - файлы и СУБД хранятся на клиенте(Рисунок 5).

Сравнение типов СУБД (Рисунок 6, на скрине опечатка, должна быть встраиваемыми)
Теперь поговорим о типы самих баз данных
1. Реляционные - это БД, в которых информация строго структурирована и связана с другой информацией жёсткими правилами.
Примеры:
Microsoft Access, SQLite, PostgreSQL, MySQL, Microsoft SQL

2. Нереляционные (NoSQL) - это БД, в которых жёсткие ограничения не требуются ни по структуре, ни по связи между информацией.
Примеры:
Redis, MongoDB, Cassandra

То есть по сути тут два подхода - один жёсткий, второй гибкий.
Типы нерялицонных баз данных (Рисунок 7):
1. Ключ-значение(Redis, Berkley DB, MemcacheDB) - похожи на словари
2. Колоночные(Cassandra, HBase) - они табличные, но у них стурктура хранения не как у реляционных, они больше любят хранить данные по столбцам,
а не по строкам
3. Графовые(Neo4j, OrientDB) - например, для логистических связей
4. Документо-ориенторованные(MongoDB, CouchDB) - это тоже что-то похожее на словари, но в них может быть любой уровень вложенности

И сразу возникает вопрос? А зачем их вообще разделили? Почему бы просто не хранить всё в одном виде?
Всё дело в ограничениях и строгости. Реляционные базы данных помогают обеспечивать консистентность наших связей и данных, что обезопашивает
нас от многих ошибок. 
А в нерялицонном подходе - мы можем например иметь разное количество столбцов, например, для одного товара нам нужен размер, а для второго нет.

Далее для того чтоб поглубже разобраться в базах данных - нам понадобятся некоторые термины:

Сущность - описываемый объект.

Отношение - таблица.

Атрибут(или поле) - столбец

Запись(или кортеж(Не как в питоне!)) - строка

Далее разберём первичный ключ и связи между таблицами

Primary key(Первичный ключ) - столбец или набор столбцов, которые уникальным образом идентифицируют строку в рамках всей таблица.
!!! Наличие первичного ключа - необязательное требование для таблица, но в большинстве случаев он будет. (Можно сказать он есть почти всегда)

Теперь разберёмся, что такое внешний ключ?
Внешний ключ(Foreign key):
1. Позволяет установить связь между таблицами.
2. Внешний ключ устанавливается для столбцов из зависимой (подчинённой) таблицы и указывает на один из столбцов из главной таблицы.
3. Как правило, внешний ключ указывает на первичный ключ из связанной таблицы.

Также разберёмся с такой вещью как Нормальные формы

Нормальная форма - требование, предъявляемое к структуре таблиц в теории реляционных баз данных для устранения из базы избыточных
функциональных зависимостей между атрибутами.

Цель нормализации - исключить избыточное дублирование данных, которое является причиной аномалий, возникающих при добавлении, редактировании
и удалении кортежей(записей).

-Первая нормальная форма(1НФ)
Переменная отношения находится в первой нормальной форме, когда в любом допустимом значении отношения каждый его кортеж(строка) содержит
только одно значение для каждого из атрибута.
Пример:
В каждой ячейки должно лежать только одно значение(без перечислений)
Пример нарушения 1НФ на Рисунке 8

-Вторая нормальная форма(2НФ)
Переменная отношения находится во второй нормальной форме, когда соблюдается все условия первой нормальной формы и каждый неключевой атрибут 
неприводимо (функционально полно) зависит от её потенциального ключа.
Пример:
Если у нас есть некая акция на какую-то категория товаров, то неправильно было бы, если скидка зависит от категории товаров - добавлять её 
в таблицу с товарами, гораздо правильнее было бы разделить их на две таблицы
Пример разрешения конфликта 2НФ на Рисунке 9

-Третья нормальная форма(3НФ)
Переменная отношения находится в третьей нормальной форме тогда и только тогда, когда соблюдается все условия второй нормальной формы и 
отсутсвуют функциональные зависимости неключевых атрибутов от ключевых.
Пример:
Первичный ключ должен быть уникальным. Например, разделять таблицу для уникальных значений.
Пример на Рисунке 10

Есть ещё и другие нормальные формы (Рисунок 11)

О плюсах и минусах нормализации - можно увидеть на Рисунке 12

Потренироваться для строительство бд можно на сайте app diagrams
