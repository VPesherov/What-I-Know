Связь один к одному используется когда нам необходимо связать одну строчку из одной таблицы с одной строчкой из другой таблицы.
Для её использование в SQL - нам нужно гарантировать следующие ограничения для таблицы.

Поле связи обязательно должно быть с данными ограничениями
PRIMARY KEY
REFERENCES Student(email) - где Student указывает на другую таблицу, а email через какое поле связываем таблицы.

остальные ограничения по желанию

Комбинация этих двух ограничений и гарантирует нам связь один к одному.
Но связывать по email, которые будет являться PRIMARY KEY - не очень выгодно так email пользователю иногда захочется сменить, в итоге
лучше связывать их по ключу SERIAL - чтоб не приходилось менять email сразу в двух местах.

Связь один ко многим это такой вид связи при котором, одной строчки из одной таблицы соответсвует множество строк из другой.
Для такой связи нужно создать ограничение в таблице где у нас будет много строк вида
REFERENCES Course(id)

остальные ограничения по желанию

Связь многие ко многим - этот вариант интересен тем, что для его реализации нам нужно промежуточная таблица
Например на один курс может быть записано куча студентов, как и наоборот один студент может быть записан на множество курсов
Для двух выбранных полей мы создаём ограничения

REFERENCES для одного поля и для второго

И нам для такой таблицы понадобится составной первичный ключ, он описывается следующим синтаксисом
CONSTRAINT pk PRIMARY KEY (course_id, student_id)

Но первичных ключ не всегда эффективен, так что пользоваться можно и обычным ключом

Разбор связей с примерами

https://habr.com/ru/articles/488054/

Код со связями

https://github.com/netology-code/sqlpy-code/blob/main/02/tables.sql

CREATE TABLE IF NOT EXISTS genre_music (
	genre_id SERIAL PRIMARY KEY,  
	name VARCHAR(60) NOT null
);
