https://proproprogs.ru/django/osnovy-orm-django-za-chas

Попробуем создать свои первые записи в файле

Давайте создадим обработчик который будет создавать одну случайную машину

Во views.py создадим следующий обработчик

def create_car(request):
    car = Car(brand='demo', model='demo', color='demo') # создаёи как обычный класс
    car.save() # обязательно сохраняем
    return HttpResponse(f'Все получилось! Новая машина {car.brand}, {car.model}') # и возвращаем информацию об успехе

и теперь создадим маршрут по которому наш обработчик будет вызываться
протягиваем в urls

urlpatterns = [
    path('admin/', admin.site.urls),
    path('new_car/', create_car)
]

Немного имзеним нашу функцию чтоб машину генерировались порандомнее

def create_car(request):
    car = Car(brand=random.choice(['B1', 'B2', 'B3']), model=random.choice(['M1', 'M2', 'M3']),
              color=random.choice(['color1', 'color2', 'color3']))
    car.save()
    return HttpResponse(f'Все получилось! Новая машина {car.brand}, {car.model}')

Всё работает

Теперь попробуем извлечь эти данные, посмотрим что же у нас там.
Снова идём во views.py

def list_car(request):
    car_objects = Car.objects.all() # мы собираем все объекты типо Car из нашей БД
    cars = [f'{c.brand}, {c.model}, {c.color}' for c in car_objects] # пройдёмся по нашем объектам и создадим из них строку
    return HttpResponse('<br>'.join(cars)) # и выведем их вставляя тэг <br>

И теперь также нужно прописать маршруты

    path('cars/', list_car),

Готово, видем список наших машин

Можно также выводить и id, который django создавал без нашего ведома

def list_car(request):
    car_objects = Car.objects.all()
    cars = [f'{c.id}: {c.brand}, {c.model}, {c.color}' for c in car_objects]
    return HttpResponse('<br>'.join(cars))

Просто обращаемся к поле id и готово

Но все данные извлекать не всегда имеет смысл, их лучше как-то фильтровать, а то их будет слишком много.

Для этого место метода all мы вызываем filter

car_objects = Car.objects.all() -> .filter()

# достанем только автомобили с брэндом B1

def list_car_filter(request):
    car_objects = Car.objects.filter(brand='B1')
    cars = [f'{c.id}: {c.brand}, {c.model}, {c.color}' for c in car_objects]
    return HttpResponse('<br>'.join(cars))

Готово!

Бывает такое, что мы хотим отфильтровать более хитро наши записи. Например у которых в брэнде встречается цифра 2.
Для этого существуют специальные модификаторы.

В данном случае поможет модификатор __contains

car_objects = Car.objects.filter(brand__contains='2')

Конежно же есть и другие модификаторы - например
__start_with - начинаться с указанной подстроки


Теперь создадим несколько владельцев автомобиля

def create_person(request):
    cars = Car.objects.all() # собираем все автомобили
    for car in cars: # в цикле проходимся
	# и на каждый автомобиль создаём персону
	# есть два способа
        # Person(name='P', car=car).save() первый способ
        Person.objects.create(name='P', car=car) # таким способом сразу создаётся объект и делать save - не надо
    return HttpResponse('Успех!')

Получим успех, после того как пропишем маршруты
Теперь выведем наших персон
Аналогично нашей функции с машинами

def list_person(request):
    person_objects = Person.objects.all()
    persons = [f'{person.id}: {person.name}, {person.car}' for person in person_objects]
    return HttpResponse('<br>'.join(persons))

Работает, но что если мы хотим в обратную сторону? По автомабилю узнать владельца
Для этого нужно в модель добавить специальный объект

В models в Person добавим этому полю свойство related_name

car = models.ForeignKey(Car, on_delete=models.CASCADE, related_name='owners')

Даже не надо делать миграции
и теперь перепишем нашу функцию

def list_car(request):
    car_objects = Car.objects.all()
    cars = [f'{c.id}: {c.brand}, {c.model}, {c.color} | {c.owners.count()}' for c in car_objects] # добавим сюда c.owners и свойство count
												  # чтоб подсчитать количество владельцев
    return HttpResponse('<br>'.join(cars))


