Модели - это классы которые являются наследникам специального класса model.
ORM (Object-Relational Mapping) - прослойка между базой данных и программным кодом.

Разберёмся как работать с моделями на практике

Модели - это наши связующие звенья - они описываются в файлике models.py

from django.db import models


# Create your models here.

# создадим модель автомобиль
class Car(models.Model):
    # поле brand - это поле varchar с максимальной длинной 50 символов
    brand = models.CharField(max_length=50)
    # max_length - является обязательным параметром
    model = models.CharField(max_length=50)
    color = models.CharField(max_length=20)
    # Но на самом деле столбика не три, а четыре так как django автоматически добавляет столбик id
    # и отвечает за идентификацию каждой строки


# добавим ещё один класс, человек - который владеет автомобилем
class Person(models.Model):
    # у человека есть имя
    name = models.CharField(max_length=50)
    # а также у человека может быть автомобиль, а может и не быть
    # поэтому нам нужно связать его с нашим классом Car
    # здесь мы указываем с каким классом связать, а также указать параметр
    # on_delete - что делать если связанная запись исчезнет из базы данных
    # можно например поставить models.CASCADE - это будет значить, что если удалится
    # машина то, удалится и человек
    car = models.ForeignKey(Car, on_delete=models.CASCADE)


После того как модели описаны надо как-то начать с ними работать, для начало приложение нужно зарегестрировать
(добавить его в installed_apps)
После этого мы должны как-то попросить django создать соответствующие модели.
Во-первых нам нужно выполнить команду, которая создаёт так называемый файл миграции.
Файл миграции - описывает какие изменения должны быть произведены с БД, чтоб она соответствовала текущей структуре.
Нужна следующая команда:

python manage.py makemigrations

После выполнения данной команды - у нас появятся новые файлы в папке migrations.Это служебные файлы. Его менять не надо.
И теперь после того как файл миграции сгенерирован - теперь миграции нужно применить.

python manage.py migrate

Если базы данных до этого нет, то команда автоматически её создаст.
Но как понять, что вообще было создано?
Эти настройки можно посмотреть в файле settings.py

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}

Если же мы хотим поменять нашу бд например на Postgres, то нужно поменять эти настройки и установить соответствующие драйвера.
Давайте попробуем подключить Postgres вместо SQL3
Для начала в терминале создадим БД

createdb -U postgres demoorm

и установим нужные драйвера

pip install psycopg2-binary

и поменяем настройки

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': 'demoorm',
        'USER': 'postgres',
        'PASSWORD': '123',
    }
}

В Django ORM реализовано множество типов данных для атрибутов моделей:
https://docs.djangoproject.com/en/3.2/ref/models/fields/#model-field-types

Чтобы выбрать правильный тип для атрибута, необходимо проанализировать поставленную задачу и определить тип по допустимым значениям.

Так как модель это Python класс, то в модели, помимо описания атрибутов, можно реализовывать методы и свойства.

Например, можно реализовать магический метод str, чтобы получить желаемое отображение объекта при выводе на экран:

class Car(models.Model):
    …

    def __str__(self):
        return f'{self.brand}, {self.model}: {self.color}'


