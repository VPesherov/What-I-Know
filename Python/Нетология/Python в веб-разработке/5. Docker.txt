Docker

Когда мы разварачивали наше приложение - мы по сути разварачивали четыре приложения
1. Django-приложения
2. Базу данных
3. Web-server nginx
4. Gunicorn

И все их мы настраивали и развёртывали по отдельности

Тут ещё может быть следующая проблема - у другого разработчика может быть другая операционная система
Исходя из этого - ему придётся иначе настраивать приложение
По иному скачивать библиотеки
По иному это всё устанавливать, настраивать и тд

И для того чтобы это решить - придумали технологию которая будет позволять разные приложения развёртывать в стандартном каком-то виде.
Это и есть docker.

Docker - комплекс программного обеспечения для виртуализации на уровне операционной системы, что позволяет управлять множеством 
виртуальных образов в разной среде и без перегрузки оборудования.
И мы можем упростить всё наше развёртывание при помощи контейнеров.

Какие задачи решает
Создание виртуального слепка системы, на которой должна запускаться программа. В виртуальной среде устанавливаются все зависимости
и остаётся только запустить виртуальный сервер, где всё настроено для запуска сервиса.

- лёгкий старт
- пакеты в системе
- различные версии питона / nodejs
- локальный конфиг для разного окружения prod/stage/dev
- стандартизация работы
- контролируемая изоляция от локальной среды (ключи, токены, env переменные)

Для того, чтобы пользоваться docker-ом ему нужно самостоятельно установить

https://docs.docker.com/get-docker/

С установкой может возникнуть проблема - что Wsl - версии 1 а не 2 - можно посмотреть в консоли винды какая версия стоит

wsl --list --verbose

и свичнуть её на вторую при необходимости

wsl --set-version Ubuntu-22.04 2

и тогда всё должно заработать в wsl - должна стать доступна команда

docker --version

Container - процесс, который выполняется на хосте. Хост может быть локальным или удалённым. Когда оператор выполняет запуск, докер
контейнер изолирован, поскольку у него есть собственная файловая система, собственная сеть и собственное изолированное дерево
процссов, отдельное от хоста. Запуск контейнера:

docker run [OPTIONS] IMAGE[:TAG|@DIGEST] [COMAND] [ARG...]

Image - основа для контейнера. Создаётся из файла конфигурации (Dockerfile) и контекста. Контекстом являются локальные файлы или другие
образы. Каждый новый образ можен наслаиваться для очередной версии, по аналогии с git иерахией. Сборка образа:

docket image build [OPTIONS] PATH | URL | ...

Контейнер - это некая сборка. А image - как будет устанавливаться и работать данная сборка.

Есть сайт докер хаб, где есть всякие образы, которые можно скачать
Например - вот образ для убунту

https://hub.docker.com/_/ubuntu

Установить его можно

docker pull ubuntu

с помощью команды

docker images 

можно посмотреть список образов которые вы установили
и теперь из этого образа - это ОС можно запустить у себя на пк

запускаем с помощью команды 

docker run ubuntu:20.04

теперь он запустился на фоне, но давайте его запустим более явно с помощью специальных флагов

docker run -i -t ubuntu:20.04

и теперь он нас перекинет в этом систему внутри консоли
можно теперь там создавать файлы смотреть содержимое и тд

одна проблема - если мы создадим там какие либо файлы, а потом выйдем - то наши файлы не сохраняться - потому что
каждый запуск - создаёт новый контейнер
но в чём тогда плюс? например на основе таких образов - можно создать свой образ

в чём может помочь докер? например нам нужны разные версии python

python 3.10
python 3.11
python 3.6

и их надо было бы каждый раз устанавливать - но с помощью докера - это можно не делать

допустим у нас есть какой-то пайтон скрипт и мы хотим его запустить на какой-то определённой версии
мы можем создать для этого специальный докер файл
Докер файл - специальный файл с помощью которого будут описываться образы

создадим его и заполним такими настройками

FROM python:3.8

WORKDIR /app/

ADD main.py test.py

CMD python3 test.py

и теперь соберём этот докер файл

docker build -t my_python_app:v1 .

где

my_python_app - название образа
. - директория

также можно облегчить немного наш python и взять его слим версию

FROM python:3.8-slim

для простых скриптов он подойдёт

этот образ можно увидеть теперь использовав

docker images

и теперь запустим его с помощью docker run

docker run my_python_app:v1

в итоге нам это даёт, что мы без установки приложения на свою машину - можем их использовать

Но как нам сохранить эти данные - если контейнер не сохраняет ничего?

В этом нам помогут Volumes

Volumes - выделенный объект памяти для использования в контейнерах.
Они позволяют
- объединять один том между разными контейнерами
- архивировать и шифровать содержимое
- подключать внешние источники из облака или внешних носителей
- использовать многократно

Создание тома и монтирование в контейнереL

docker volume create my-vol
docker run -d --name devtest --mount sourcre=myvol2,target=/app nginx:latest

создадим некий файл с содержимым хэллоу ворлд
для того чтобы этот файл не исчез сделаем следующее

создадим у себя папку
и в этой папке уже будем хранить данные контейнера

перейдём в наш убунту но укажем папку где всё будем хранить

docker run -it -v ./test_folder:/test/ ubuntu:20.04

здесь строчка ./test_folder:/test/ - означает директорию которая соответсвует нашей директории из контейнера

и видим что теперь эти директории связаны
Это и называется volumes

теперь попробуем развернуть django-приложение внутри контейнера
как это сделать? нам нужно создать свой образ
образ готового джанго нету - поэтому намн нужно это делать на основе python

создаём докер файл с такими настройками

FROM python:3.12-slim

WORKDIR /usr/src/app

ENV PYTHONDONTWRITEBYTECODE 1
ENV PYTHONUNBUFFERED 1

COPY ./requirements.txt .
RUN pip install -r requirements.txt

COPY . .

EXPOSE 8000

CMD ["python3", "manage.py", "runserver", "0.0.0.0:8000"]

и теперь запускаем его с помощью докера

docker build -f django_dockerfile -t my_django:v1 .

и теперь запустим его

docker run my_django:v1

хорошая ссылка

https://fixmypc.ru/post/sozdanie-i-zapusk-konteinera-docker-s-django-postgressql-gunicorn-i-nginx/?ysclid=lqidfyzdg5919609096






