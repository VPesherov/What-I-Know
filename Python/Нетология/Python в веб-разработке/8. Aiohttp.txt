Aiohttp - микро-фреймворк, но который заточен под асинхронную обработку.

Поскольку это у нас микро-фреймворк - то приложение у нас может спокойно поместиться в одном файле.

pip install aiohttp

Также помимо aiohttp можем поставить некоторые дополнительные аддоны, которые ускоряют работу этого фреймворка

pip install aiohttp[speedups]

и теперь напишем просто минимальное приложение server.py

from aiohttp import web

app = web.Application()

web.run_app(app, port=8080)


теперь попробуем поделать запросы на наш сервер с помощью библиотеки requests

pip install requests

и создадим client.py

import requests

response = requests.get("http://127.0.0.1:8080")
print(response.status_code)
print(response.text)

Получим 404 - так как нет такой страницы от нашего сервера

давайте создадим какую-нибудь вьюшку - в aiohttp - view может быть как класс так и функция

в server.py добавим такую view

async def hellow_world(request):
    return web.json_response({"hello": "world"})

и добавим route


app.add_routes([
    web.get('/hello/world', hello_world),
    web.post('/hello/world', hello_world)
])


и теперь наш запрос из client.py будет работать

теперь попробуем пообмениваться ифнормацией
например мы можем также в url передавать параметры, jsonы и хедерсы

response = requests.post("http://127.0.0.1:8080/hello/world?name=John&age=20",
                        json={"name": "user_3", "password": "123"},
                        headers={'token': "123"}
                        )

print(response.status_code)
print(response.text)

здесь обязательно уже будет использоваться post - так как get прикреплять нельзя
запустим и проверим что всё работает - вернулся статус 200 значит всё отлично

но теперь давайте приходящую информацию - обрабатывать
изменим нашу view

async def hello_world(request):
    print(request.query)
    print(await request.json())
    print(request.headers)
    return web.json_response({"hello": "world"})

и теперь если мы будем делать запросы к этому view с помощью post - получим успех

поднимем теперь базу с помощью docker-compose

version: "3.9"
services:
  db:
    image: postgres:14.3-alpine3.15
    ports:
      - "5431:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "123"
      POSTGRES_DB: "aiohttp_db"

и установим нужные библиотеки

pip install sqlalchemy asyncpg

и созадим models.py через который будем взаимодействовать с бд
с таким содержанием

import os
import datetime

from sqlalchemy.ext.asyncio import create_async_engine, async_sessionmaker, AsyncAttrs
from sqlalchemy.orm import DeclarativeBase, Mapped, mapped_column
from sqlalchemy import DateTime, String, func

POSTGRES_PASSWORD = "123"
POSTGRES_USER = "postgres"
POSTGRES_DB = "aiohttp_db"
POSTGRES_HOST = "localhost"
POSTGRES_PORT = "5431"

PG_DSN = f"postgresql+asyncpg://{POSTGRES_USER}:{POSTGRES_PASSWORD}@{POSTGRES_HOST}:{POSTGRES_PORT}/{POSTGRES_DB}"

engine = create_async_engine(PG_DSN)
session = async_sessionmaker(engine, expire_on_commit=False)


class Base(AsyncAttrs, DeclarativeBase):
    pass


class User(Base):
    __tablename__ = "app_user"

    id: Mapped[int] = mapped_column(primary_key=True)
    name: Mapped[str] = mapped_column(String(50), unique=True, index=True, nullable=False)
    password: Mapped[str] = mapped_column(String(60), nullable=False)
    registration_time: Mapped[datetime.datetime] = mapped_column(DateTime, server_default=func.now())


async def init_orm():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)
        
и запустим базу 

docker-compose up

и теперь опишем наш новый view
сделаем заготовку в server.py


class UserView(web.View):

    async def get(self):
        pass

    async def post(self):
        pass

    async def patch(self):
        pass

    async def delete(self):
        pass


app.add_routes([
    web.get('/user/{user_id:\d+}', UserView),
    web.patch('/user/{user_id:\d+}', UserView),
    web.delete('/user/{user_id:\d+}', UserView),
    web.post('/user', UserView),
])

и теперь инициализируем и запустим нашу бд на сервере

async def init_db(app: web.Application):
    print('START')
    await init_orm()
    yield
    print('FINISH')
    await engine.dispose()


app.cleanup_ctx.append(init_db)

32:21 - остановился



