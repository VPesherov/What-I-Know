План занятия
1. SSH
2. Установка пакетов в Ubuntu
3. Запуск Django
4. Маршрутизация
5. Итоги

Для того чтоб работать с удалёнными серверами - нам нужна такая штука как ssh(secure shell)
SSH используется для:
-Доступа на удалённый сервер
-Передача файлов между устройствами (scp)
-Простой и безопасный способ взаимодействия с git-сервисами

Работа с ssh
1. Создаём приватный и публичный ключ командой
ssh-keygen

2. После созданий - выводим публичный ключ командой 
cat ~/.ssh/id_rsa.pub

3. Теперь данным ключом можно пользоваться

Подключаемся к нашему серверу созданному на reg.ru

Создадим там юзера

adduser имя_пользователя

Под root - входить небезопасно - поэтому мы и будем пользоваться нашим новым пользователем
Дадим нашему пользователя права sudo

usermod имя_пользователя -aG sudo

и переключимся на нашего пользователя

su имя_пользователя

Теперь перейдём в корневую директорию

cd ~

и скачаем необходимые пакеты
но для начала обновим - существующие пакеты

sudo apt update

для начала нам понадобиться Python
можем проверить его наличие

python3 --version

проверяем наличие git

git --version

теперь установим postgres

sudo apt install postgresql

затем можно проверить - всё ли прошло успешно командой

sudo systemctl status postgresql

если в выданном тексте есть слово active - то всё окей

установим теперь venv и pip для Python - можно скачать их одной командой просто перечислив их

sudo apt install python3-venv python3-pip

Теперь чтоб запустить Django-проект на сервер - нужно выполнить следующие шаги

1. Установить Python (Сам Python + venv + pip)
2. Установить postgres + создать БД
3. Скачать сам Django-проект
4. Внести корректировки в settings.py в django-проекте.
5. Применить миграции
6. Запустить сервер

Попробуем всё это провернуть

теперь к серверу после создания нашего пользователя - мы можем подключаться по имени

Начнём с создание БД - так как остальные шаги до этого мы уже выполнили

В начале переключаемся на нашего postgres пользователя

su sudo postgres

и пишем psql

и задать теперь этому пользователю пароль 

ALTER USER postgres WITH PASSWORD '123';

и теперь от его имени создать БД

CREATE DATABASE my_db;

чтоб выйти теперь пишем 
\q
затем
exit

Теперь берём какой-нибудь репозиторий с django-проектом и клонируем его на сервер

git clone https://github.com/netology-code/dj-homeworks.git

теперь с помощью команд cd
нужно попасть на тот уровень где есть файл manage.py

как только попали в нужную папку - создаём виртуальное окружение

python3 -m venv env

и активируем наше виртуальное окружение

source env/bin/activate

с помощью команды

which python

можно проверить успех создания виртуального окружения
при успехе - команда выдаст расположение python, который будет находиться в вашем виртальном окружении

далее скачаем из requirements - всё необходимое для работы

pip install -r requirements.txt

с помощью pip freeze - можно проверить

далее мы должны настроить settings.py

nano smart_home/settings.py

настраиваем нашу БД в setting.py - добавляем юзера пароль и название бд

если успешно настроили - можно провести миграции, верно и обартное 
если миграции успешные - то значит успешно настроили)

теперь проверим - а работает ли вообще наш проект?

запускаем 

python manage.py runserver

но данная команда не запустит сервер - потому что данная команда - запускает локальный сервер
чтоб всё работало - нам нужно настроить маршрутизацию

нужно воспользоваться следующей командой

python manage.py runserver 0.0.0.0:8000

причём порт можно указать любой


python manage.py runserver 0.0.0.0:8800

и теперь в браузере - мы можем получить доступ

вводим наш ip в браузере

http://79.174.84.196:8800/

сервер заработает но получим ошибку

DisallowedHost

По умолчанию django - блокирует неизвестных хостов
Это значит что мы должны внести имя хоста - в список разрешённых хостов

Возвращаемся в настройки нашего проекта в settings.py
Находим настройку ALLOWED_HOSTS = []
И добавляем наш ip

ALLOWED_HOSTS = ['79.174.84.196']

сохраняем наши настройки 

python manage.py runserver 0.0.0.0:8800

и ошибка исчезает

Тут есть две проблемы
1. Мы запускаем наш сервер руками - и это не круто так как если какая-то ошибка - нам надо его отключать
2. И в браузере - нужно указывать номер порта - и это неправильно





