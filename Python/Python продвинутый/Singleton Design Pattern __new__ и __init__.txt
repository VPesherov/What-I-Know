Синглтон (одиночка) – это паттерн проектирования, цель которого ограничить возможность создания объектов 
данного класса одним экземпляром. 
Он обеспечивает глобальность до одного экземпляра и глобальный доступ к созданному объекту.

https://stepik.org/lesson/529113/step/1?unit=521927

и вот полезная

https://webdevblog.ru/realizaciya-shablona-singleton-v-python/

Например

class Character:
    _instance = None

    def __new__(cls, *args, **kwargs):
        if not cls._instance:
            cls._instance = super().__new__(cls)
        return cls._instance

    def __init__(self):
        self.race = 'Elf'


c = Character()
print(c.race) # Elf
d = Character()
d.race = 'Ork'
print(c.race) # Ork
print(d.race) # Ork

мы изменили new так (по умолчанию он работает по-другому) что теперь он создаёт глобальный экземпляр
от которого меняются все
Таким образом мы можем защитить наш класс чтоб не было возможности создать больше одного
экземпляра

c.race = 'Human'
print(c.race) # 'Human'
print(d.race) # 'Human'

По умолчанию __new__ выглядит так

    def __new__(cls, *args, **kwargs):
        obj = super().__new__(cls)
        return obj

и его даже писать не надо так как он всегда вызывается при создании экземпляра, но если нам
надо поменять механику работы как это было выше то можно и описать его




