-Любая запускаемая программа в ОС хостится специальным контейнером - процессом. Основное
назанчение процессов - изолировать программы.

-Процессы разделяют доступ к ядрам(конкурируют за них). Внутри ОС есть механизмы благодаря которым процессам выделяются
некоторые временные отрезки, в течении которых процессы могут пользоваться ядрами и ОС сама решает какому процессу сейчас
выдать временной отрезок и чтоб процесс поделал в этот отрезок что-нибудь полезное.

-Процессы не имеют доступ к адресным пространставам друг друга. Это происходит на уровне ОС. В реальном жизни даже на
машине где очень много ядер невозможно крутить всё всё паралелльно и поэтому и используется механизм time-slicing(временной отрезок - 
выделение времени на выполнение процесса)

-Поток исполнения - это некий объект, который представляет набор последовательных программных инструкций, который 
независимо управляется планировщиком потоков, являющимся частью ОС.

-Потоки - являются частью процесса (.exe в Windows это процесс). В рамках одного процесса может работать N потоков. В некоторых
языках - параллельно. Но не в Python! В python потоки обеспечивают конкурентность.

Особенности потоков в Python:

1. Потоки независимы друг от друга - изолируют наборы инструкций.
2. Потоки могут обращаться к любым объектам любых потоков.
3. Поток может создавать объекты, доступ к которым будет только у создавшего их потока (threading.local)
4. Потом может существовать только в рамках процесса и не может мигрировать из одного процесса в другой
(исключая fork, но это не миграция, а копирование)
5. Процесс может порождать N-потоков, которые имеют полный и прямой доступ ко всему адресному пространству процесса
(к куче, локальные переменные функций не доступны)
6. Создание потоков имеет свою "стоимость"(это дорогостоящая операция). Поэтому обычно мы работаем с пулом потоков.
7. Потоки в Python не могут работать одновременно - только time-slicing(временной отрезок)














