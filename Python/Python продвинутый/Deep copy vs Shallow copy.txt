Рассмотрим следующую проблему
есть список

list1 = [1, 2, 3, [4, 5, 6]]

скопируем его и добавим во вложенный список скопирумого списка 7

copied_list = list1.copy()
copied_list[3].append(7)

print(list1)
print(copied_list)

# Вывод
[1, 2, 3, [4, 5, 6, 7]]
[1, 2, 3, [4, 5, 6, 7]]
#

В итоге 7 добавилась в оба списка, хотя добавляли в один? Но что случилось
Дело в том что метод copy прозводит не глубокое копирование, это копирование производится таким образом
что подсписок который содержится в list1 будем скопирован не как объект полностью
а будет скопировано просто его ссылка, соответсвенно и list1 и copied_list на третьем индексе
содержат ссылку на один и тот же объект, и соответсвенно мы делаем append к одному и тому же объекту
Если бы мы просто добавили в список число
list1 = [1, 2, 3, [4, 5, 6]]

copied_list = list1.copy()
copied_list.append(9)

print(list1) # 
print(copied_list) #

# Вывод
[1, 2, 3, [4, 5, 6]] # не добавилась 9
[1, 2, 3, [4, 5, 6], 9]
#

В итоге проблема глубокого копирования касается только составных объектов(объекты которые содержат
другие объекты)
А как же решить эту проблему? Воспользоваться глубоким копированием.
Нужно импортировать модуль copy

Для того чтоб получить поверхносную копию нужно сделать следующее
import copy

list1 = [1, 2, 3, [4, 5, 6]]

shallow_copy = copy.copy(list1)
shallow_copy[3].append(8)

print(list1, shallow_copy, sep='\n')
# Вывод
[1, 2, 3, [4, 5, 6, 8]]
[1, 2, 3, [4, 5, 6, 8]]
#

Теперь воспользуемся глубокой копией

deep_copy = copy.deepcopy(list1)
deep_copy[3].append(10)
print(list1, deep_copy, sep='\n')

# Вывод
[1, 2, 3, [4, 5, 6, 8]]
[1, 2, 3, [4, 5, 6, 8, 10]]
#

и видим что 10 была добавлена только в один список

Более глубоко разобрано тут
https://stepik.org/lesson/529116/step/1?unit=521930














