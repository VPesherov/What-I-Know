В python есть возможность создать функцию без имени - анонимную функцию.
Для примера рассмотрим простую функцию, которая возводит число в квадрат:

def f(x):
    return x**2

Для того, чтобы к ней обратиться, мы должны указать её имя:

print(f(4))

Но в python можно создавать функции, которые не требуют имени (анонимные функции). 
Для этого нужно ключевое слово lambda. Синтаксис следующий:

lambda arg1, arg2, … : выражение
Вот как можно перезаписать функция f через анонимную функцию

a = lambda x: x**2
print(a(4))

При вызове всё работает как с обычными функциями: передали 4 в функцию, возвели в квадрат и вывели.
Таким образом, можно сказать, что функции

def f(x):
    return x**2
и
a = lambda x: x**2
одинаковы по функциональности.


Когда использовать анонимные функции

lambda функции необходимы в использовании в тех случаях, 
когда необходимо написать функцию в одну строчку.

Ещё один пример реализации обычной функции и анонимной – посчитать периметр треугольника:

def perimeter(a, b, c)
    return a+b+c
При помощи lambda функции это запишется вот так

per = lambda a, b, c: a+b+c

Также можно указать анонимную функцию без переменных:

h = lambda: 'hello'
print(h())

Анонимные функции не могут содержать циклы. 
К примеру такую вот функцию нельзя реализовать при помощи lambda:

def fact(n):
    pr = 1
    for I in range(1, n+1):
        pr *= i
    return pr


Условный оператор if может быть применен в анонимных функциях, но с небольшой натяжкой. 
В lambda функции можно реализовать только одностраничник - программу из одной строки. 
Поэтому условный оператор необходимо переписать через тернарный оператор. 
Вот пример реализации простой и анонимной функции, которые возвращают positive 
если число больше 0, и negative в обратном случае:

def f(x):
    if x > 0:
        return 'positive'
    return 'negative'

a = lambda x: 'positive' if x>0 else 'negative'


Пример применения lambda функций – нужно отсортировать список:

a = [72, 4, 39, 100, 200, 5, 28, 123, 44]
a.sort()
print(a)

Однако у метода sort() есть именованный аргумент key, который должен принимать функцию. 
Здесь можно создать обычную функцию, а можно анонимную. 
Отсортируем наш список по последней цифре в числе.
С обычной функции код имеет вид:

def f(x):
    return x%10

a = [72, 4, 39, 100, 200, 5, 28, 123, 44]
a.sort(key=f)
print(a)

С анонимной функцией код имеет вид:

a = [72, 4, 39, 100, 200, 5, 28, 123, 44]
a.sort(key=lambda x: x%10)
print(a)

Ещё один пример – решение линейной функции, где внутри функции мы использовали анонимную функцию:

def linear(k, b):
    return lambda x: x*k + b

graf1 = linear(2, 5)
print(graf1(3))