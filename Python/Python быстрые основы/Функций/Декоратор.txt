Декоратор – функция, которая принимает одну функцию и возвращает другую функцию. 
Они нужны для того, чтобы функции добавилось новое поведение.

def header(func):

    def inner(*args, **kwargs):
        print('<h1>')
        func(*args, **kwargs)
        print('</h1>')
    return inner

def table(func):
    def inner(*args, **kwargs):
        print('<table>')
        func(*args, **kwargs)
        print('</table>')

    return inner

def say(name, surname, age):
    print('hello', name, surname, age)

say = header(table(say)) # базовый пример декоратора 
say('Vasya', 'Ivanov', 30)

# Вывод
<h1>
<table>
hello Vasya Ivanov 30
</table>
</h1>
#

Стоит также отметить, что функции таким образом не декорируют. 
Декораторы «навешивают» при помощи @ следующим образом:

def header(func):

    def inner(*args, **kwargs):
        print('<h1>')
        func(*args, **kwargs)
        print('</h1>')
    return inner


def table(func):
    def inner(*args, **kwargs):
        print('<table>')
        func(*args, **kwargs)
        print('</table>')

    return inner

@table
@header        # say = header(table(say))
def say(name, surname, age):
    print('hello', name, surname, age)

say('Vasya', 'Ivanov', 30)

# Вывод
<table>
<h1>
hello Vasya Ivanov 30
</h1>
</table>
#