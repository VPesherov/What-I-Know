Метод .clear() очищает весь словарь. В итоге после вызова получится пустой словарь
d = {1: 'one', 2: 'two', 3: 'three'}
print(d)
d.clear()
print(d)

# Вывод
{1: 'one', 2: 'two', 3: 'three'}
{}
#

Метод get() – позволяет получить значение ключа.  
Нужно указать внутри скобок один аргумент – ключ, значение которого хотим получить. 
Если ключа в словаре нет, то выведет None, 
но если в метод get() внести второй аргумент, то вместо None будет появляться это значение:

d = {1: 'one', 2: 'two', 3: 'three'}
print(d.get(1))
print(d.get(5))
print(d.get(5, 'No such key'))

# Вывод
one
None
No such key
#

Метод setdefault()  - получает значение ключа. 
Похож на прошлый метод get(), однако при обращении к несуществующему 
ключу он вносит в словарь новую пару ключ-значение. 
Значением будет второй аргумент, который был передан в этот метод, либо же None, 
если в методе только один аргумент:

d = {1: 'one', 2: 'two', 3: 'three'}
print(d)
print(d.setdefault(1))
print(d)
print(d.setdefault(6))
print(d)
print(d.setdefault(7, 'семь' ))
print(d)

# Вывод
{1: 'one', 2: 'two', 3: 'three'}
one
{1: 'one', 2: 'two', 3: 'three'}
None
{1: 'one', 2: 'two', 3: 'three', 6: None}
семь
{1: 'one', 2: 'two', 3: 'three', 6: None, 7: 'семь'}
#

Метод pop() – возвращает значение, находящееся под указанным ключом, 
а из самого словаря удаляется пара с данным ключом:

# Вывод
two
{1: 'one', 3: 'three'}
one
{3: 'three'}
#

Метод popitem() удалит и вернет двойной кортеж (key, value) из словаря. 
Пары возвращаются с конца словаря, в порядке LIFO (последним пришёл - первым ушёл).

d = {1: 'one', 2: 'two', 3: 'three'}
print(d.popitem())
print(d)
print(d.popitem())
print(d.popitem())
print(d)

# Вывод
(3, 'three')
{1: 'one', 2: 'two'}
(2, 'two')
(1, 'one')
{}
#

Метод keys() позволяет получить все ключи словаря.

d = {1: 'one', 2: 'two', 3: 'three'}
print(d.values())
vals = list(d.values())
print(vals)

# Вывод
dict_values(['one', 'two', 'three'])
['one', 'two', 'three']
#

Метод items() – возвращает коллекцию, 
в которой содержаться все пары «ключ-значение» в виде кортежей

d = {1: 'one', 2: 'two', 3: 'three'}
print(d.items())
couples = list(d.items())
print(couples)

# Вывод
dict_items([(1, 'one'), (2, 'two'), (3, 'three')])
[(1, 'one'), (2, 'two'), (3, 'three')]
#

Метод update() обновляет словарь элементами из другого словаря. 
Другими словами, метод сливает(мержит от английского «merge») один словарь в другой: 
добавляются новые ключи из другого словаря, при совпадении ключей записывается значение 
из переданного словаря

d = {1: 'one', 2: 'two', 3: 'three'}
w = {4: 'four', 5: 'five'}
d.update(w)
print(d)

# Вывод
{1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five'}
#
