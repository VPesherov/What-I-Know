Метод .copy() копирует элементы оригинального множества в новое множество. 
При этом вы можете сохранить новое множество в отдельную переменную и, вызвав функцию id,  
вы увидите, что перед вами совершенно новый объект

a = {1, 2, 3}
print(a, id(a))
b = a.copy()
print(b, id(b))

# Вывод
{1, 2, 3} 140203056209856
{1, 2, 3} 140203054598176
#

Метод .clear() очищает все множество от его элементов, тем самым происходит полная очистка. 
В итоге после вызова метода .clear() ваша переменная будет ссылаться на пустое множество

a = {1, 2, 3}
print(a)
a.clear()
print(a)

# Вывод
{1, 2, 3}
set()
#

Метод .remove() позволяет удалить элемент из множества. 
Если указать элемент, который отсутствует в множестве, возникнет ошибка KeyError. 
Попробуйте в редакторе кода ниже удалить несуществующий элемент и сами увидите, что произойдет

a = {'mention', 'soup', 'tradition'}
print(a)
a.remove('tradition')
print(a)

# Вывод
{'soup', 'tradition', 'mention'}
{'soup', 'mention'}
#

Метод .discard() позволяет удалить элемент из множества, 
но в отличии от метода .remove() не возникнет ошибки при попытке удалить несуществующий элемент

a = {'mention', 'soup', 'tradition'}
print(a)
a.discard('tradition')
print(a)

# Вывод
{'soup', 'tradition', 'mention'}
{'soup', 'mention'}
#

Удалить элементы вычитанием

my_set = {
    'mention', 'soup', 'pneumonia', 'tradition', 'concert', 'tease', 'generation',
    'winter', 'national', 'jacket', 'winter', 'wrestle', 'proposal', 'error',
    'pneumonia', 'concert', 'value', 'value', 'disclose', 'glasses', 'tank',
    'national', 'soup', 'feel', 'few', 'concert', 'wrestle', 'proposal', 'soup',
    'sail', 'brown', 'service', 'proposal', 'winter', 'jacket', 'mention',
    'tradition', 'value', 'feel', 'bear', 'few', 'value', 'winter', 'proposal',
    'government', 'control', 'value', 'few', 'generation', 'service', 'national',
    'tradition', 'government', 'mention', 'proposal'
}
my_set -= {'government', 'national', 'tease'}

Метод .pop()  вернет произвольный элемент из множества, а затем удалит его. 
При попытки вызвать метод у пустого множества возникнет ошибка KeyError: 'pop from an empty set'

a = {'mention', 'soup', 'tradition'}
print(a)
remove_item = a.pop()
print(f'Удалили {remove_item}, тепер a={a}')
remove_item = a.pop()
print(f'Удалили {remove_item}, тепер a={a}')
remove_item = a.pop()
print(f'Удалили {remove_item}, тепер a={a}')

# Вывод
{'mention', 'tradition', 'soup'}
Удалили mention, тепер a={'tradition', 'soup'}
Удалили tradition, тепер a={'soup'}
Удалили soup, тепер a=set()
#

Метод .add() позволяет добавить новый элемент в множество. 
Метод оказывает изменение на состояние самого множества без присвоения. 
Если вы пытаетесь добавить элемент, который уже существует в множестве, 
ничего не произойдет и ошибок никаких не будет.

a = {1, 2, 3}
print(a)
a.add(5)
print(a)
a.add(3)
a.add(100)
print(a)

# Вывод
{1, 2, 3}
{1, 2, 3, 5}
{1, 2, 3, 100, 5}
#

Метод .update() позволяет добавить сразу несколько элементов. Метод .update() может принимать 
произвольное количество любых объектов, поддерживающий итерацию по своим элементам. 
Это могут быть списки, кортежи, другое множество и т.д. Дублирующие элементы последовательностей 
игнорируются, само множество после вызова меняется

set_str = {'mention', 'soup', 'tradition'}
set_num = {1, 2, 3}
my_list = [True, 101, 'hello', 'soup', 2]
print(set_str)
set_str.update(set_num)
print(set_str)
set_str.update(my_list)
print(set_str)
set_str.update('abcd', (2, 3, 4, 5))
print(set_str)
set_str.update(range(5))
print(set_str)

# Вывод
{'mention', 'soup', 'tradition'}
{1, 'mention', 2, 3, 'soup', 'tradition'}
{1, 'mention', 2, 3, 101, 'hello', 'soup', 'tradition'}
{1, 2, 3, 4, 'c', 5, 'd', 'mention', 'a', 'hello', 'soup', 101, 'tradition', 'b'}
{0, 1, 2, 3, 4, 'c', 5, 'd', 'mention', 'a', 'hello', 'soup', 101, 'tradition', 'b'}
#

Метод .union() позволяет выполнить операцию объединения. Метод .union() может принимать 
произвольное количество любых объектов, поддерживающий итерацию по своим элементам. 
Это могут быть списки, кортежи, другое множество и т.д. Дублирующие элементы последовательностей 
игнорируются. Результатом вызова метода .union() будет новое множество, или, другими словами, 
новый объект множества. Метод не изменяет значения того множества, у которого метод вызывался

set_str = {'car', 'soup', 'bus'}
set_num = {1, 2, 3}
my_list = [True, 101, 'hello', 'soup', 2]
new_set = set_str.union(set_num)
print(set_str)
print(new_set)
print('-'*15)
new_set_2 = set_num.union(my_list)
print(set_num)
print(new_set_2)
print('-'*15)
print(set_num.union('abcd', (2, 3, 4, 5)))
print('-'*15)
print(set_str.union(set_num, range(5)))

# Вывод
{'bus', 'soup', 'car'}
{'bus', 1, 'car', 2, 3, 'soup'}
---------------
{1, 2, 3}
{1, 2, 3, 101, 'soup', 'hello'}
---------------
{1, 2, 3, 4, 5, 'd', 'c', 'b', 'a'}
---------------
{'bus', 1, 'car', 2, 3, 0, 4, 'soup'}
#

Метод .intersection_update() позволяет выполнить операцию пересечения. 
Метод .intersection_update() может принимать произвольное количество любых объектов, 
поддерживающий итерацию по своим элементам. Результатом вызова метода .intersection_update() 
будет не создание нового множества, а изменение существующего. 
Присваивать ничего не нужно, автоматически после вызова измениться множество, 
у которого данный метод был вызван. При попытке сохранить результат вызова этого метода  в 
переменную, в ней сохраниться значение None

set_num_1 = {1, 2, 3, 4}
set_num_2 = {2, 3, 4, 5, 6}
set_num_3 = {3, 4, 6}
res = set_num_2.intersection_update(set_num_1, set_num_3)
print(set_num_1)
print(set_num_2)
print(set_num_3)
print(res)

# Вывод
{1, 2, 3, 4}
{3, 4}
{3, 4, 6}
None
#

Метод .difference() позволяет выполнить операцию «разность множеств». 
Метод .difference() может принимать произвольное количество любых объектов, 
поддерживающий итерацию по своим элементам. Результатом вызова метода .difference() 
будет новое множество куда войдут только элементы из операции разности множеств. 
Старые объекты никак не изменятся в процессе работы этого метода

set_a = {'car', 'soup', 'bus'}
set_b = {'bus', 'soup'}

res_1 = set_a.difference(set_b)
res_2 = set_b.difference(set_a)
print(set_a)
print(set_b)
print(res_1, res_2)
print('-'*15)

# Вывод
{'soup', 'car', 'bus'}
{'soup', 'bus'}
{'car'} set()
---------------
#

Метод .difference_update() позволяет выполнить операцию «разность множеств». 
Метод .difference_update() может принимать произвольное количество любых объектов, 
поддерживающий итерацию по своим элементам. Результатом вызова метода .difference_update() 
будет не создание нового множества, а изменение существующего. Присваивать ничего не нужно, 
автоматически после вызова измениться множество, у которого данный метод был вызван. 
При попытке сохранить результат вызова этого метода  в переменную, в ней сохраниться значение None

set_a = {'car', 'soup', 'bus'}
set_b = {'bus', 'soup', 'bro', 'lol'}

set_a.difference_update(set_b)
print(set_a)
set_b.difference_update(set_a)
print(set_b)
print('-'*15)

# Вывод
{'car'}
{'bus', 'lol', 'soup', 'bro'}
---------------
#

Метод .symmetric_difference() позволяет выполнить операцию «симметрическая разность». 
Метод .symmetric_difference() может принимать только один объект, поддерживающий итерацию по 
своим элементам. Результатом вызова метода .symmetric_difference() будет новое множество 
куда войдут только элементы из операции разности множеств. Старые объекты никак не изменятся 
в процессе работы этого метода

set_a = {'car', 'soup', 'bus'}
set_b = {'bus', 'soup'}

res = set_a.symmetric_difference(set_b)
print(set_a)
print(set_b)
print(res)
print('-'*15)

# Вывод
{'soup', 'bus', 'car'}
{'soup', 'bus'}
{'car'}
---------------
#

Метод .symmetric_difference_update() позволяет выполнить операцию «симметрическая разность». 
Метод .symmetric_difference_update() может принимать произвольное количество любых объектов, 
поддерживающий итерацию по своим элементам. Результатом вызова метода .symmetric_difference_update() 
будет не создание нового множества, а изменение существующего. Присваивать ничего не нужно, 
автоматически после вызова измениться множество, у которого данный метод был вызван. 
При попытке сохранить результат вызова этого метода  в переменную, в ней сохраниться значение None

set_a = {'car', 'soup', 'bus'}
set_b = {'bus', 'soup', 'bro', 'lol'}

set_a.symmetric_difference_update(set_b)
print(set_a)
set_b.symmetric_difference_update(set_a)
print(set_b)
print('-'*15)

# вывод
{'car', 'bro', 'lol'}
{'soup', 'bus', 'car'}
---------------
#
