f - строка - удобная строка для вывода переменных
Пример

x = 10
print(f' x = {x}')
# Вывод 'x = 10'

Если нужно вывести определённое количество знаков после запятой то

c = 1/3
print(f'{c}') # вывод 0.3333333333
print(f'{c:.3f}') # вывод 0.333
print(f'{c:.1f}') # вывод 0.3
print(f'{c:.2f}') # вывод 0.33
print(f'{c:.10f}') # вывод 0.3333333333

Если нужно вывести просто знаки после запятой для целого числа, то

d = 100
print(f'{d:.1f}') # 100.0
print(f'{d:.2f}') # 100.00

При помощи f-строк можно влиять и на отображение целых чисел
n = 12345
print(f'{n:8d}') # ___12345 добавятся пробелы до 8
print(f'{n:08d}') # 00012345 # добавятся нули
также можно влиять на знак разделителя между числами

n = 12345678912345
print(f'{n:,d}) # 12,345,678,913,345
print(f'{n:_d}) # 12_345_678_913_345

sep = '_'
print(f'{n:{sep}d}') # вложенная f строка, вывод: 12_345_678_913_345

Выравнивание

number = 12345.6789
print(f"Число {number = }")
print(f"|{number:25}|")
print(f"|{number:<25}|") # выравнивание по левому краю
print(f"|{number:>25}|") # выравнивание по правому краю
print(f"|{number:^25}|") # выравнивание по центру
print('-'*25)

# Вывод 
Число number = 12345.6789
|               12345.6789|
|12345.6789               |
|               12345.6789|
|       12345.6789        |
-------------------------

Можно использовать не только пробелы

number = 12345.6789
print(f"Число {number = }")
print(f"|{number:=<25}|")
print(f"|{number:=>25}|")
print(f"|{number:=^25}|")
print('-'*25)

#Вывод

Число number = 12345.6789
|12345.6789===============|
|===============12345.6789|
|=======12345.6789========|
-------------------------

f строку можно присвоить переменной

number = 12345
number = f'{number:06d}' # 012345



