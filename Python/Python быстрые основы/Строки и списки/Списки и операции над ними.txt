marks = [4, 5, 4, 3, 5]

Длина списка len(marks) # = 5

Сложение списков

a = [1, 2, 3]
b = [4, 5, 6]
print(a + b) # [1, 2, 3, 4, 5, 6]
print(a + [4]) # [1, 2, 3, 4]
a = ['hi'] + a # ['hi', 1, 2, 3]

Дублирование списков

a = [0] * 5
print(a) # [0, 0, 0, 0, 0]

b = [1, 2, 3] * 3 # [1, 2, 3, 1, 2, 3, 1, 2, 3]

Находится ли элемент в списке

a = [2, 5, 8, 9]
print(5 in a) # True
print(15 in a) # False

Максимальное минимальное и сумма значений

a = [2, 5, 8, 9]
print(max(a))  # Максимальное значение # 9
print(min(a))  # Минимальное значение # 2
print(sum(a))  # Сумма всех элементов # 24

Сортировка списка

b = [6, 5, 2, 9]
print(sorted(b))  # [2, 5, 6, 9]
print(sorted(b, reverse=True)) # [9, 6, 5, 2]
# сам список b не изменился

Ввод списка в ручную
b = list(map(int, input('Введите значения: ').split()))
print(f'Вот наш список: {b}')

Удалить из списка
a = [34, 23, 12, 28, 9, 15]
del a[2]
print(a) # [34, 23, 28, 9, 15]

Есть одна очень большая особенность. 
Вы можете присваивать списки друг другу. 
Но в таком случае при изменении одного списка будет меняться и другой.
 Причина в том, что Python хранит в переменных ссылки на объекты. 
В примере ниже переменные a и b будут ссылаться на один и тот же объект 
и все изменения которые вы будете производить с одной переменной будут также влиять и на другую.

a = [34, 23, 12, 28, 9, 15]
b = a
print(a)  # => [34, 23, 12, 28, 9, 15]
print(b)  # => [34, 23, 12, 28, 9, 15]

b[0] = 999
print(a)  # => [999, 23, 12, 28, 9, 15]
print(b)  # => [999, 23, 12, 28, 9, 15]

Что бы избежать данной ситуации нужно копировать список

a = [34, 23, 12, 28, 9, 15]
b = a[:]
print(a)  # => [34, 23, 12, 28, 9, 15]
print(b)  # => [34, 23, 12, 28, 9, 15]

print('-' * 10)

b[0] = 999
print(a)  # => [34, 23, 12, 28, 9, 15]
print(b)  # => [999, 23, 12, 28, 9, 15]

print('-' * 10)

a[0] = 111
print(a)  # => [111, 23, 12, 28, 9, 15]
print(b)  # => [999, 23, 12, 28, 9, 15]

Методы

Добавление в конец списка append()
a.append(1) # добавит 1 в список

Очистить список

a.clear()
print(a)  # []

Копировать список

a = [34, 23, 12, 28, 9, 15]
b = a.copy()
print(a)  # [34, 23, 12, 28, 9, 15]
print(b)  # [34, 23, 12, 28, 9, 15]

print('-' * 10)

a[0] = 3
print(a)  # [3, 23, 12, 28, 9, 15]
print(b)  # [34, 23, 12, 28, 9, 15]

Посчитать количество какого-то элемента в списке

a = [34, 23, 12, 28, 9, 15, 23, 2, 23]
print(f'23 встречается {a.count(23)} раз')
print(f'12 встречается {a.count(12)} раз')
print(f'24 встречается {a.count(24)} раз')

Метод extend добавляет элементы из итерируемой последовательности

a = [34, 23, 12, 28, 9, 15, 23, 2, 23]
a.extend([23, 12])
print(a)  # [34, 23, 12, 28, 9, 15, 23, 2, 23, 23, 12]
a.extend('hello')
print(a)  # [34, 23, 12, 28, 9, 15, 23, 2, 23, 23, 12, 'h', 'e', 'l', 'l', 'o']

Метод index находит индекс нужного элемента

a = [34, 23, 12, 28, 23, 2, 23]
print(a.index(23)) # 1
print(a.index(12)) # 2
print(a.index(23, 2)) # индекс именно второго вхождения # 4

Метод insert вставляет в конкретную позицию

a = [34, 23, 12, 28, 23]
a.insert(1, 99) # первый параметр index вторйо что нужно вставить
print(a) # [34, 99, 23, 12, 28, 23]

Метод pop удаляет элемент с конца

a = [34, 23, 12, 28, 23]

a.pop()
print(a)  # [34, 23, 12, 28]

Метод remove - удаляет элемент по значению

a = [34, 23, 12, 28, 23, 34]
a.remove(34)
print(a)  # [23, 12, 28, 23, 34]
a.remove(34)
print(a)  # [23, 12, 28, 23]

Метод reverse() не требует никаких аргументов и данный метод просто переворачивает список. 
При повторном вызове список вернётся в изначальное положение.

a = [34, 23, 12, 28, 23]
a.reverse()
print(a)  # [23, 28, 12, 23, 34]
a.reverse()
print(a)  # [34, 23, 12, 28, 23]

Cамый, наверное, популярный метод списков - это sort(). 
Он выполняет сортировку. 
Если не передать никаких аргументов, то по умолчанию сортировка будет выполнена по возрастанию. 
После этого можете вызвать метод reverse(). Список отсортируется по убыванию. 
Если вы сразу хотите его отсортировать по убыванию, то должны вызвать метод 
sort и в нём изменить параметр reverse на True.

a = [34, 23, 12, 28, 23]
a.sort()
print(a)  # [12, 23, 23, 28, 34]

b = [34, 23, 12, 28, 23]
b.sort(reverse=True)
print(b)  # [34, 28, 23, 23, 12]














