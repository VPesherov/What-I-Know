Это были все методы, которые позволяют считывать значения с файла, но раз можно считывать, 
то можно их и записывать. Это делается при помощи метода write. 
Он должен принимать то, что мы хотим записать. Посмотрим как это работает:
file = open('111.txt', encoding = 'utf-8')
file.write('hello world')

Такая запись приведёт к ошибке, в которой будет говориться, что наш объект не поддерживает запись.
Это связано с тем, что при открытии файла по умолчанию он открывается в режиме чтения. 
По умолчанию наша запись с открытием файла на самом деле выглядит следующим образом:
file = open('111.txt', 'r', encoding = 'utf-8')
Поэтому нам необходимо записать следующим образом:
file = open('111.txt', 'w', encoding = 'utf-8')
file.write('hello world')
file.write('hello world')

Теперь содержимое нашего файла «111.txt» следующее:
hello worldhello world
То есть при помощи этой функции мы перезаписали весь наш файл.
Если нужно, чтобы каждая функция write начиналась с новой строки, то необходимо 
в конце каждой строки добавлять служебный символ «\n», который отвечает за перенос строки. 
И наш код будет выглядеть следующим образом:
file = open('111.txt', 'w', encoding = 'utf-8')
file.write('hello world\n')
file.write('hello world\n')

Теперь рассмотрим как записывать эти значения в конец файла без удаления предыдущего текста. 
Для этого необходимо открыть файл не в режиме «w», а в режиме «a». 
Вернём изначальный текст в 111.txt и посмотрим что получится при следующем коде:
file = open('111.txt', 'a', encoding = 'utf-8')
file.write('hello world\n')
file.write('hello world\n')

Получим:
Я очень хочу, чтобы людей,
умеющих программировать на Python
было больше, поэтому мне
необходима ваша поддержка!
Став моим спонсором, вы поможете
мне оплатить рабочие и сбытовые
расходы, а значит. я буду делать
больше полезных видео для вас.
hello world
hello world

Как мы видим, текст не перезаписан, а только добавились две строчки. 

О других режимах работы с файлами можно прочитать здесь:
https://stackabuse.com/file-handling-in-python/

Читая о режимах, учитывайте, что не все режимы поддерживают одновременно чтение и запись. 
Например, наши режимы «a» и «w» предполагают только запись. 
При попытке выполнить чтение файла получим ошибку.
Одним из режимов, поддерживающих и чтение и запись, является «a+».

Теперь рассмотрим методы close(). Его нужно вызывать после того, как вы закончили обрабатывать 
ваш файл. Если его не закрывать, то можешь произойти утечка памяти. 
Таким образом, схема работы с файлом должна быть следующей:
Открытие файла
Обработка файла
Закрытие файла

Исходя из этой схемы наш последний код должен иметь следующий вид:
file = open('111.txt', 'a', encoding = 'utf-8')
file.write('hello world\n')
file.write('hello world\n')
file.close()

Но есть проблема, что в случае возникновения ошибки в обработке файла, файл не закроется, 
даже несмотря на наличие функции close(). 
Лучший вариант избегания данной проблемы – использование контекстного менеджера, 
о котором будем следующий урок.

