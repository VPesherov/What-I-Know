Абстрактным называется класс, который содержит один и более абстрактных методов. 
Абстрактным называется объявленный, но не реализованный метод. 
Абстрактные классы не могут быть инстанциированы, от них нужно унаследовать, 
реализовать все их абстрактные методы и только тогда можно создать экземпляр такого класса.
 В Python отсутствует встроенная поддержка абстрактных классов,
 для этой цели используется модуль abc (Abstract Base Class)

Возьмем для примера, шахматы. 
У всех шахматных фигур есть общий функционал, например - 
возможность фигуры ходить и быть отображенной на доске. 
Исходя из этого, мы можем создать абстрактный класс Фигура, 
определить в нем абстрактный метод (в нашем случае - ход, поскольку каждая фигура ходит по-своему) 
и реализовать общий функционал (отрисовка на доске).

from abc import ABC, abstractmethod
 
class ChessPiece(ABC):
    # общий метод, который будут использовать все наследники этого класса
    def draw(self):
        print("Drew a chess piece")
 
    # абстрактный метод, который будет необходимо переопределять для каждого подкласса
    @abstractmethod
    def move(self):
        pass

Если мы попытаемся инстанциировать данный класс:
a = ChessPiece() # ошибка

Как видите, система не дает нам создать экземпляр данного класса. 
Теперь нам необходимо создать конкретный класс, например, 
класс ферзя, в котором мы реализуем метод move.

class Queen(ChessPiece):
    def move(self):
        print("Moved Queen to e2e4")
 
# Мы можем создать экземпляр класса
q = Queen()
# И нам доступны все методы класса
q.draw()
q.move()


Обратите внимание, абстрактный метод может быть реализован сразу в абстрактном классе, 
однако, декоратор abstractmethod, обяжет программистов, реализующих подкласс 
либо реализовать собственную версию абстрактного метода, либо дополнить существующую. 
В таком случае, мы можем переопределять метод как в обычном наследовании, 
а вызывать родительский метод при помощи super().

from abc import ABC, abstractmethod
 
 
class Basic(ABC):
    @abstractmethod
    def hello(self):
        print("Hello from Basic class")
 
 
class Advanced(Basic):
    def hello(self):
        super().hello()
        print("Enriched functionality")
 
a = Advanced()
a.hello()

# Hello from Basic class
# Enriched functionality

Таким образом, используя концепцию абстрактных классов, 
мы можем улучшить качество архитектуры приложения, 
уменьшить объем работы и при этом, обеспечить легкость дальнейшей поддержки кода.


