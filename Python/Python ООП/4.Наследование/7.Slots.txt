При помощи конструкции slots мы можем задать классам только определённые атрибуты
Представим следующую проблему

class Point:

    def __init__(self, x, y):
        self.x = x
        self.y = y

Есть класс точка принимающий два атрибута x, y
Создадим экземпляр класса

p1 = Point(2, 3)
p1.x # 2
p1.y # 3
Всё отлично, но мы можем создать спокойно и другие атрибуты
p1.q = 100

Но как же ограничить, чтоб не насоздавать личного?
Поможет переменная __slots__

class PointSlots:

    __slots__ = ('x', 'y')

    def __init__(self, x, y):
        self.x = x
        self.y = y

После определение класса, мы прописываем переменную __slots__ и присваиваем ей коллекцию
из строк, где перечислены наши переменные в данном случае x и y
Теперь

p2 = PointSlots(5, 10)
p2.x
Out[9]: 5
p2.y
Out[10]: 10
p2.q =100 # Ошибка

Причём даже если мы удалим атриут
del p2.y
мы сможем снова его создать без ошибки
p2.y = 100
# Ошибок не будет

Экземпляр класса, использующий __slots__ снижает количество используемой памяти,
так как содержит только пространство имён объекта.

Таким образом использовать __slots__ важно в тех случаях, когда:

Есть необходимость в фиксированном количестве используемых имён переменных в объектах.
Необходимо ускорение работы программы.
Имеются ограничения по объему используемой памяти.


