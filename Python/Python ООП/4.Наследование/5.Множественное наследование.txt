Множественное наследование подразумевает под собой наследование дочерним классом 
от двух и более базовых классов. Применяется чаще при использовании миксинов
(mixins) - примесей. Данная механика процесса работает в рамках правил 
MRO - Method Resolution Order, которую можно посмотреть применив конструкцию:
                    print(MyClass.__mro__)

в результате чего будет выведена к примеру такая конструкция описывающая путь
наследования для конкретного класса:
(<class '__main__.MyClass'>, <class '__main__.Goods'>, <class '__main__.MixinLog'>, <class 'object'>)

При множественном наследовании рекомендуется передавать аргументы в инициализатор
первого базового класса(назовем инициализирующим БК), чтобы он сработал в первую 
очередь и аргументы оказались именно в нём, а не в других базовых классах:

            ПЕРЕДАЧА АРГУМЕНТОВ в ИНИЦИАЛИЗИРУЮЩИЙ базовый класс
                 ↓
class MyClass(Goods, MixinLog):  # Множественное наследование
                         ↑
                    ДАННЫЙ и ПОСЛЕДУЮЩИЕ базовые классы как правило имеют
                    инициализаторы self без других аргументов 

Так, изменение порядка наследованных базовых классов приведет к ошибке TypeError.
При предполагаемом нарушении порядка следования базовых классов (! не имеющих
дополнительных инициализаторов аргументов, кроме self), следует реализовывать 
функцию делегирования super().__init__() - без параметров в каждом базовом классе.
В таком случае, проблем нарушения порядка наследуемых базовых классов не будет.
