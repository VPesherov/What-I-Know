Метод - это та же самая функция, но объявленная внутри класса
метод отличается от функции тем, что метод будем привязан к конкретному объекту, функция же ни
с кем не связана
при вызыве метода, объект который её вызвал будет с ней связан и он же будет автоматически простовляться
в метод как аргумент 

именно поэтому при не указании self в методе функция вызовет ошибку, так как он простовляет
ваш объект в функцию, а некуда

Поэтому нужно обязательно указывать параметры если не хотим использоваться @staticmethod

Также есть функий hasattr(объект, 'атрибута') # она проверяет наличие у экземпляра класса
данного атрибута

Сама же переменная self - это общепринятое название объекта у которого был вызван метод,
можно давать любое название, но принято называть именно так


Пример всего этого

class Car:
    "Класс для определения характеристик машин" # docstring
    model = "BMW" # задали модель
    engine = 1.6  # и движок

    def set_color_car(my_obj, color): # создали метод, который принимает объект(тут он назван my_obj
					но по умолчанию self) и цвет
        my_obj.color = color # присваиваем цвет
        print(f'Теперь у машины {my_obj.color} цвет') # выводим результат

    def get_color_car(my_obj): # получим данные цвет передав ему объект
        return my_obj.color


a = Car()  # Создаём экземпляр класса a
b = Car()  # Создаём экземпляр класса b
a.set_color_car('black')  # Теперь у машины black цвет
print('Атрибуты ЭК a:', a.__dict__)  # проверяем наличие данного атрибута в a
b.set_color_car('red')  # Теперь у машины red цвет
print('Атрибуты ЭК b:', b.__dict__)  # проверяем наличие данного атрибута в b
print(a.get_color_car(), b.get_color_car())  # Получаем значения из метода

# Вывод
Теперь у машины black цвет
Атрибуты ЭК a: {'color': 'black'}
Теперь у машины red цвет
Атрибуты ЭК b: {'color': 'red'}
black red
#



