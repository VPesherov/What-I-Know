Полиморфизм - это возможность обработки совершенно разных объектов
путём использования одного и того же метода по названию

Полиморфизм происходит от греческих слов poly (много) и morphism (формы), 
что в буквальном значении полиморфизм означает множество форм. 
Это означает, что одна и та же сущность (операция, функция, метод, объект) 
может использоваться для разных типов. Это делает программирование более интуитивным и простым.

В Python есть разные способы определения полиморфизма. Давайте посмотрим на эти варианты.

Полиморфизм в операциях

Мы знаем, что оператор + широко используется в программах Python. 
Но у него нет однозначного использования.

Для целочисленных типов данных оператор + используется для выполнения а
рифметической операции сложения.

num1 = 1
num2 = 2
print(num1 + num2)
 Подобным образом оператор + для строк используется для конкатенации.

str1 = "Give me "
str2 = "Five"
print(str1+str2)
Здесь мы видим, что один оператор + использовался 
для выполнения разных операций с разными типами данных. 
Это одно из самых простых проявлений полиморфизма в Python.

Полиморфизм в методах класса

Здесь мы создали два класса Cat и Dog. У них похожая структура и они имеют методы 
с одними и теми же именами info() и make_sound().

class Cat:
    def __init__(self, name):
        self.name = name

    def info(self):
        print(f"I am a cat. My name is {self.name}.")

    def make_sound(self):
        print("Meow")


class Dog:
    def __init__(self, name):
        self.name = name

    def info(self):
        print(f"I am a dog. My name is {self.name}.")

    def make_sound(self):
        print("Bark")


cat_obj = Cat("Ren")
dog_obj = Dog("Stimpy")

for animal in (cat_obj, dog_obj):
    animal.make_sound()
    animal.info()
    animal.make_sound()

# Вывод
Meow
I am a cat. My name is Ren.
Meow
Bark
I am a dog. My name is Stimpy.
Bark
#






















