Теперь вы знаете, что классы необходимы для создания других объектов. 
Сами эти объекты, мы их называем экземплярами, очень часто хранят в себе данные. 
Как только мы познакомились с инициализацией то практически в каждой 
задаче вам нужно было реализовать метод  __init__. Это было наиболее 
распространенное действие - принять данные при создании экземпляра и сохранить в нем эти данные. 
Следующей наиболее часто используемой операцией была реализация метода __str__ 
для репрезентативного отображения нашего объекта.

Вот пример типичного класса:

class Customer:
    def __init__(self, name, balance):
        self.name = name
        self.balance = balance

    def __str__(self):
        return f"Customer {self.name}, balance={self.balance}"


bob = Customer('bob', 100)
print(bob)

# Customer bob, balance=100

Но если приглядеться методы __init__ очень похожи между собой у разных классов, 
различаются только названия атрибутов и их тип. Текст отображения разных классов может отличаться, 
но в нем опять же присутствуют атрибуты класса.

Раз есть места, в которых формируется практически одинаковый код, 
и в которых нужно реализовать одинаковые потребности, то логично это как-то автоматизировать.

Для этого, начиная с версии python3.7, был придуман механизм, который называется dataclass. 

dataclass призван автоматизировать генерацию кода в реализации класса. 
По названию dataclass видно, что это класс для хранения данных. 
Раз в вашем классе есть метод __init__, значит в ЭК вашего класса будут храниться 
данные, как например в нашем классе Customer

Давайте реализуем класс Customer с помощьюdataclass, но для этого сперва 
dataclass нужно импортировать  из стандартного модуля dataclasses

from dataclasses import dataclass

@dataclass
class Customer:
    name: str
    balance: int


jack = Customer('jack', 500)
print(jack)
print(jack.name, jack.balance)

# Вывод
Customer(name='jack', balance=500)
jack 500
#

Вы просто декорируете  с помощьюdataclass свой класс и далее внутри указываете, 
как атрибуты будут хранится в вашем классе. 
При этом указывать аннотацию типа для каждого атрибута обязательно.

Использую dataclass теперь

код становится короче и выразительнее
не нужно определять метод __init__
не нужно определять метод __repr__ и метод __str__
нужно прописывать аннотацию для указания типов атрибутов














