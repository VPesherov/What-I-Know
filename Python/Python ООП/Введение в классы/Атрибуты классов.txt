Создадим простой класс Person с двумя переменными name и age

class Person:
    name = 'Ivan'
    age = 30

теперь мы можем спокойно обращаться к этим атрибутам через точку, например
Person.name # Ivan
Person.age # 30

Мы также не можем обратиться к атрибуту который в классе не определён
Person.surname # ошибка атрибут ошибка

Чтоб посмотреть все атрибуты класса нужно это сделать с помощью метода __dict__

Person.__dict__

# Вывод
mappingproxy({'__module__': '__main__',
              'name': 'Ivan',
              'age': 30,
              '__dict__': <attribute '__dict__' of 'Person' objects>,
              '__weakref__': <attribute '__weakref__' of 'Person' objects>,
              '__doc__': None,
              '__annotations__': {}})
#

Также можно посмотреть атрибут с помощью функции getattr
getattr(Person, 'name') # Ivan

Эта функция помогает избежать ошибки отсутствия атрибутов, указав ей третьим параметром значение по
умолчанию

getattr(Person, 'x', 100) # 100

Не забываем что значение атрибута нужно передевать именно строкой


Чтоб изменить значение атрибута делаем следующее

Person.name = 'Misha'

Person.name # Misha

Если же попробовать записать атрибут которого не было 
Person.x = 100

То питон динамически создаст новый атрибут и можно будет сразу же к нему обращаться

Person.x # 100

Также установить атрибут можно с помощью функции setattr(Объект, 'Имя', Значение)
setattr(Person, 'x', 200) 

Person.x # 200

Чтоб удалить атрибут нужно использовать команду del

del Person.x

или существует встроенная функция позволяющая удалить атрибут delattr(Объект, 'Имя')

delattr(Person, age) # удалиться атрибут класса age

Переопределим наш класс заново

class Person:
    name = 'Ivan'
    age = 30

создадим два экземпляра класса a и b

a = Person()
b = Person()

и затем создадим новый атрибут класса Person.z = 100

и теперь в экземплярах стала сразу же доступен атрибут z тоже самое будет 
и с удалением и с изменением атрибута, но можно изменить атрибут конкретно у экземпляра

b.name = 'Andrey'

Тогда у а останется имя Ivan а у b - Andrey






